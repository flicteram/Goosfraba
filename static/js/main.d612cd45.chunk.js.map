{"version":3,"sources":["Components/BarGraph/BarGraph.js","App.js","index.js"],"names":["BarGraph","data","useTooltip","tooltipData","tooltipLeft","tooltipTop","tooltipOpen","showTooltip","hideTooltip","useTooltipInPortal","detectBounds","containerRef","TooltipInPortal","yMax","x","d","month","y","value","xScale","scaleBand","range","round","domain","map","padding","yScale","scaleLinear","Math","max","compose","scale","accessor","xPoint","yPoint","legendData","scaleOrdinal","item","color","length","className","ScaleSVG","width","height","ref","i","barHeight","Group","onMouseOver","event","datum","coords","localPoint","target","ownerSVGElement","handleMouseOver","onMouseOut","Bar","bandwidth","fill","left","top","random","shape","App","useState","setData","client","ApolloClient","uri","cache","InMemoryCache","useEffect","query","gql","then","resp","allPosts","reduce","acc","current","toDate","Number","Date","createdAt","toLocaleDateString","slice","split","filter","join","newArr","Object","entries","array","ReactDOM","render","document","getElementById"],"mappings":"oVA2GeA,I,EAAAA,EAjGf,YAA2B,IAARC,EAAO,EAAPA,KAEjB,EAOIC,cANFC,EADF,EACEA,YACAC,EAFF,EAEEA,YACAC,EAHF,EAGEA,WACAC,EAJF,EAIEA,YACAC,EALF,EAKEA,YACAC,EANF,EAMEA,YAGF,EAA0CC,YAAmB,CAC3DC,cAAc,IADRC,EAAR,EAAQA,aAAcC,EAAtB,EAAsBA,gBAgBlBC,EAHS,IACO,GAAY,GAI5BC,EAAI,SAAAC,GAAC,OAAIA,EAAEC,OACXC,EAAI,SAAAF,GAAC,OAAe,KAAVA,EAAEG,OAEZC,EAASC,YAAU,CACvBC,MAAO,CAAC,EAAG,KACXC,OAAO,EACPC,OAAQtB,EAAKuB,IAAIV,GACjBW,QAAS,KAELC,EAASC,YAAY,CACzBN,MAAO,CAACR,EAAM,GACdS,OAAO,EACPC,OAAQ,CAAC,EAAGK,KAAKC,IAAL,MAAAD,KAAI,YAAQ3B,EAAKuB,IAAIP,QAG7Ba,EAAU,SAACC,EAAOC,GAAR,OAAqB,SAAA/B,GAAI,OAAI8B,EAAMC,EAAS/B,MACtDgC,EAASH,EAAQX,EAAQL,GACzBoB,EAASJ,EAAQJ,EAAQT,GAEzBkB,EAAaC,YAAa,CAC9Bb,OAAQtB,EAAKuB,KAAI,SAAAa,GAAI,OAAEA,EAAKrB,SAC5BK,MAAOpB,EAAKuB,KAAI,SAAAa,GAAI,OAAEA,EAAKC,WAG3B,OAAIrC,EAAKsC,OAIP,sBAAKC,UAAU,iBAAf,UACA,cAACC,EAAA,EAAD,CAAUC,MAAO,IAAKC,OAAQ,IAA9B,SACE,qBAAKC,IAAKjC,EAAe+B,MApCjB,IAoC+BC,OAnC9B,IAmC8CH,UAAU,QAAjE,SACGvC,EAAKuB,KAAI,SAACT,EAAG8B,GACZ,IAAMC,EAAYjC,EAAOqB,EAAOnB,GAChC,OACE,cAACgC,EAAA,EAAD,CACIC,YAAa,SAACC,GAAD,OAlD3B,SAA0BA,EAAOC,GAC/B,IAAMC,EAASC,YAAWH,EAAMI,OAAOC,gBAAiBL,GACxD1C,EAAY,CACVH,YAAa+C,EAAOrC,EACpBT,WAAY8C,EAAOlC,EACnBd,YAAY+C,IA6CoBK,CAAgBN,EAAD,UAAUlC,EAAEC,MAAZ,YAAqBD,EAAEG,MAAvB,YACrCsC,WAAYhD,EAFhB,SAGE,cAACiD,EAAA,EAAD,CACE3C,EAAGmB,EAAOlB,GACVE,EAAGJ,EAAOiC,EACVH,OAAQG,EACRJ,MAAOvB,EAAOuC,YACdC,KAAM5C,EAAEuB,SARZ,cAAmBO,WAexBvC,GACK,cAACM,EAAD,CACA4B,UAAU,UAEVoB,KAAMxD,EACNyD,IAAKxD,EAJL,SAMDF,GAJMyB,KAAKkC,UAOhB,cAAC,IAAD,CACE/B,MAAOI,EACP4B,MAAM,cApCH,6C,0BCEIC,MAxDf,WAEE,MAAqBC,mBAAS,IAA9B,mBAAOhE,EAAP,KAAYiE,EAAZ,KACMC,EAAS,IAAIC,IAAa,CAC9BC,IAAK,uCACLC,MAAO,IAAIC,MAIbC,qBAAU,WAERL,EAAOM,MAAM,CACXA,MAAMC,YAAD,gMAUJC,MAAK,SAAAC,GAAI,OAAEV,EAAQU,EAAK3E,KAAK4E,SAASC,QAAO,SAACC,EAAIC,GAEnD,IAAMC,EAASC,OAAO,IAAIC,KAAKH,EAAQI,UAAU,GAAGC,qBAAqBC,MAAM,EAAE,GAAGC,MAAM,IAAIC,QAAO,SAAAnD,GAAI,MAAS,MAAPA,KAAYoD,KAAK,KAE5H,OADAR,KAAUF,EAAMA,EAAIE,KAAYF,EAAIE,GAAQ,EACrCF,IACP,UACF,IAGF,IAAMW,EAASC,OAAOC,QAAQ3F,GAAMuB,KAAI,SAAAqE,GACtC,OAAOA,EAAM,IACX,IAAK,IAAK,MAAO,CAAC,MAAQ,UAAU3E,MAAM2E,EAAM,GAAGvD,MAAM,OACzD,IAAK,IAAK,MAAO,CAAC,MAAQ,WAAWpB,MAAM2E,EAAM,GAAGvD,MAAM,QAC1D,IAAK,IAAK,MAAO,CAAC,MAAQ,QAAQpB,MAAM2E,EAAM,GAAGvD,MAAM,SACvD,IAAK,IAAK,MAAO,CAAC,MAAQ,QAAQpB,MAAM2E,EAAM,GAAGvD,MAAM,UACvD,IAAK,IAAK,MAAO,CAAC,MAAQ,MAAMpB,MAAM2E,EAAM,GAAGvD,MAAM,cACrD,IAAK,IAAK,MAAO,CAAC,MAAQ,OAAOpB,MAAM2E,EAAM,GAAGvD,MAAM,SACtD,IAAK,IAAK,MAAO,CAAC,MAAQ,OAAOpB,MAAM2E,EAAM,GAAGvD,MAAM,QACtD,IAAK,IAAK,MAAO,CAAC,MAAQ,SAASpB,MAAM2E,EAAM,GAAGvD,MAAM,UACxD,IAAK,IAAK,MAAO,CAAC,MAAQ,YAAYpB,MAAM2E,EAAM,GAAGvD,MAAM,UAC3D,IAAK,KAAM,MAAO,CAAC,MAAQ,UAAUpB,MAAM2E,EAAM,GAAGvD,MAAM,SAC1D,IAAK,KAAM,MAAO,CAAC,MAAQ,WAAWpB,MAAM2E,EAAM,GAAGvD,MAAM,QAC3D,IAAK,KAAM,MAAO,CAAC,MAAQ,WAAWpB,MAAM2E,EAAM,GAAGvD,MAAM,WAE7D,OAAOuD,KAGT,OACE,qBAAKrD,UAAU,MAAf,SACE,cAAC,EAAD,CAAUvC,KAAMyF,OCxDtBI,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.d612cd45.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Group } from '@visx/group';\r\nimport { Bar } from '@visx/shape';\r\nimport { scaleLinear, scaleBand,scaleOrdinal } from '@visx/scale';\r\nimport { useTooltip, useTooltipInPortal } from '@visx/tooltip';\r\nimport { localPoint } from '@visx/event';\r\nimport {LegendOrdinal} from '@visx/legend'\r\nimport { ScaleSVG } from '@visx/responsive';\r\nimport './BarGraph.css'\r\n\r\nfunction BarGraph({data}) {\r\n\r\n  const {\r\n    tooltipData,\r\n    tooltipLeft,\r\n    tooltipTop,\r\n    tooltipOpen,\r\n    showTooltip,\r\n    hideTooltip,\r\n  } = useTooltip();\r\n\r\n  const { containerRef, TooltipInPortal } = useTooltipInPortal({\r\n    detectBounds: true,\r\n  })\r\n  function handleMouseOver (event, datum){\r\n    const coords = localPoint(event.target.ownerSVGElement, event);\r\n    showTooltip({\r\n      tooltipLeft: coords.x,\r\n      tooltipTop: coords.y,\r\n      tooltipData:datum\r\n    });\r\n  };\r\n\r\nconst width = 400;\r\nconst height = 400;\r\nconst margin = { top: 20, bottom: 20, left: 20, right: 20 };\r\n\r\nconst yMax = height - margin.top - margin.bottom;\r\n\r\nconst x = d => d.month;\r\nconst y = d => +d.value * 100;\r\n\r\nconst xScale = scaleBand({\r\n  range: [0, 395],\r\n  round: true,\r\n  domain: data.map(x),\r\n  padding: 0.1,\r\n});\r\nconst yScale = scaleLinear({\r\n  range: [yMax, 0],\r\n  round: true,\r\n  domain: [0, Math.max(...data.map(y))],\r\n});\r\n\r\nconst compose = (scale, accessor) => data => scale(accessor(data));\r\nconst xPoint = compose(xScale, x);\r\nconst yPoint = compose(yScale, y);\r\n\r\nconst legendData = scaleOrdinal({\r\n  domain: data.map(item=>item.month),\r\n  range: data.map(item=>item.color),\r\n});\r\n\r\n  if(!data.length){\r\n    return <h1>Loading...</h1>\r\n  }\r\n  return (\r\n    <div className='graphContainer'>\r\n    <ScaleSVG width={400} height={300}>\r\n      <svg ref={containerRef}  width={width} height={height} className='graph'>\r\n        {data.map((d, i) => {\r\n          const barHeight = yMax - yPoint(d);\r\n          return (\r\n            <Group key={`bar-${i}`} \r\n                onMouseOver={(event)=>handleMouseOver(event,`${d.month} ${d.value} posts`)}\r\n                onMouseOut={hideTooltip}>\r\n              <Bar\r\n                x={xPoint(d)}\r\n                y={yMax - barHeight}\r\n                height={barHeight}\r\n                width={xScale.bandwidth()}\r\n                fill={d.color}\r\n              />\r\n            </Group>\r\n          );\r\n        })}\r\n      </svg>\r\n      </ScaleSVG>\r\n      {tooltipOpen && (\r\n            <TooltipInPortal\r\n            className='toolTip'\r\n            key={Math.random()}\r\n            left={tooltipLeft}\r\n            top={tooltipTop}\r\n          >\r\n          {tooltipData}\r\n          </TooltipInPortal>\r\n          )}\r\n      <LegendOrdinal\r\n        scale={legendData}\r\n        shape=\"circle\"\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nexport default BarGraph","import './App.css';\nimport React, { useEffect,useState } from 'react'\nimport BarGraph from './Components/BarGraph/BarGraph';\nimport {\n  ApolloClient,\n  InMemoryCache,\n  gql\n} from \"@apollo/client\";\n\n\nfunction App() {\n\n  const [data,setData]=useState({})\n  const client = new ApolloClient({\n    uri: 'https://fakerql.goosfraba.ro/graphql',\n    cache: new InMemoryCache()\n  });\n  \n\n  useEffect(()=>{\n    /*fetch data from the API*/\n    client.query({\n      query:gql`\n        query{\n          allPosts(count:500){\n            createdAt,\n            id,\n            title,\n            published\n          }\n        }\n      `\n    }).then(resp=>setData(resp.data.allPosts.reduce((acc,current)=>{\n      /* Turned into date object so I can check for the month*/\n      const toDate = Number(new Date(current.createdAt-1).toLocaleDateString().slice(0,2).split('').filter(item=>item!=='/').join(''))\n      toDate in acc ? acc[toDate]++ : acc[toDate]=1\n      return acc\n    },{})))\n  },[])\n\n  /*Transformed object to array of objects*/\n  const newArr = Object.entries(data).map(array=>{\n    switch(array[0]){\n      case '1': return {'month':\"January\",value:array[1],color:\"red\"}\n      case '2': return {'month':\"February\",value:array[1],color:\"blue\"}\n      case '3': return {'month':\"March\",value:array[1],color:\"black\"}\n      case '4': return {'month':\"April\",value:array[1],color:\"yellow\"}\n      case '5': return {'month':\"May\",value:array[1],color:\"aquamarine\"}\n      case '6': return {'month':\"June\",value:array[1],color:\"green\"}\n      case '7': return {'month':\"July\",value:array[1],color:\"grey\"}\n      case '8': return {'month':\"August\",value:array[1],color:\"purple\"}\n      case '9': return {'month':\"September\",value:array[1],color:\"orange\"}\n      case '10': return {'month':\"October\",value:array[1],color:\"brown\"}\n      case '11': return {'month':\"November\",value:array[1],color:\"pink\"}\n      case '12': return {'month':\"December\",value:array[1],color:\"magenta\"}\n    }\n    return array\n    })\n\n  return (\n    <div className=\"App\">\n      <BarGraph data={newArr}/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport  ReactDOM  from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}